AWSTemplateFormatVersion: "2010-09-09"

# This template deploys a VPC, with a pair of public and private subnets spread
# across two Availability Zones. It deploys an Internet Gateway, with a default
# route on the public subnets. It deploys a pair of NAT Gateways (one in each AZ),
# and default routes for them in the private subnets.
Description: >
  This template deploys a basic VPC with two public and private subnets in it.

Parameters:
  EnvironmentName:
    Description: A name that will be prefixed to resource names based on the environment
    Type: String

  VpcCIDR:
    Description: Please enter the VPC's CIDR
    Type: String

  # AZ1
  PublicSubnet1CIDR:
    Description: Please enter the first public subnet CIDR
    Type: String

  PrivateSubnet1CIDR:
    Description: Please enter the first private subnet CIDR
    Type: String

  # AZ2
  PublicSubnet2CIDR:
    Description: Please enter the second public subnet CIDR
    Type: String

  PrivateSubnet2CIDR:
    Description: Please enter the second private subnet CIDR
    Type: String

  # AZ3 (optional)
  PublicSubnet3CIDR:
    Description: Please enter the third public subnet CIDR
    Type: String
    Default: ""

  PrivateSubnet3CIDR:
    Description: Please enter the third private subnet CIDR
    Type: String
    Default: ""

Conditions:
  # Only create third subnet pair if both CIDRs for third public & private subnets are present
  createThirdSubnetPair: !And
    - !Not [!Equals [!Ref PublicSubnet3CIDR, ""]]
    - !Not [!Equals [!Ref PrivateSubnet3CIDR, ""]]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          # Value: development-vpc, staging-vpc, production-vpc
          Value: !Join ["-", [!Ref EnvironmentName, "vpc"]]

  IGW:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
        - Key: Name
          Value: !Join ["-", [!Ref EnvironmentName, "igw"]]

  VpcIgwAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref EnvironmentName, "public-route-table"]]

  # AZ1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} - AZ1 - Public Subnet

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} - AZ1 - Private Subnet

  # AZ2
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} - AZ2 - Public Subnet

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} - AZ2 - Private Subnet

  # AZ3 (optional)
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Condition: createThirdSubnetPair
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet3CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} - AZ3 - Public Subnet

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: createThirdSubnetPair
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Condition: createThirdSubnetPair
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} - AZ3 - Private Subnet

Outputs:
  vpcId:
    Description: The ID used to refer to the created VPC
    Value: !Ref VPC

  publicSubnet1:
    Description: The first public subnet's reference
    Value: !Ref PublicSubnet1

  publicSubnet2:
    Description: The second public subnet's reference
    Value: !Ref PublicSubnet2

  publicSubnet3:
    Description: The third public subnet's reference
    Value: !Ref PublicSubnet3
    Condition: createThirdSubnetPair

  privateSubnet1:
    Description: The first private subnet's reference
    Value: !Ref PrivateSubnet1

  privateSubnet2:
    Description: The second private subnet's reference
    Value: !Ref PrivateSubnet2

  privateSubnet3:
    Description: The second private subnet's reference
    Value: !Ref PrivateSubnet3
    Condition: createThirdSubnetPair
